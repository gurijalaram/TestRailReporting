/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id "org.sonarqube" version "2.8"
    id "io.qameta.allure" version "2.11.2"
    id "checkstyle"
}

allprojects {
    group = 'com.apriori.qa'
    version = '0.0.1-SNAPSHOT'
    apply plugin: 'java'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

subprojects {
    configurations {
        testCompile
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'org.sonarqube'
    apply plugin: 'project-report'

    def encodingType = 'UTF-8'

    tasks.withType(Copy).all {
        duplicatesStrategy 'include'
    }

    // Copy allure properties into each module test resources
    processTestResources {
        from project(":shared-util").projectDir.path + "/src/test/resources/allure.properties"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://plugins.gradle.org/m2/" }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/apriori-snapshots'
        }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/apriori-releases'
        }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/thirdparty'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = encodingType
    }

    //set project name and jar name
    project.ext.set('jar_name', 'automation-qa')

    //compile jar file
    task fatJar(type: Jar) {
        archiveBaseName.set 'automation-qa'
        zip64 = true

        manifest {
            attributes 'Main-Class': 'testsuites.TestMain'
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from sourceSets.test.output
        from { configurations.runtimeClasspath.findAll { !it.name.endsWith('pom') }.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.txt'
        with jar
    }

    //define checkstyle xml and version
    checkstyle {
        toolVersion = '9.3'
        ignoreFailures = false
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    }

    checkstyleMain {
        source ='src/main/java'
    }
    checkstyleTest {
        source ='src/test/java'
    }

    //define sonarqube properties
    sonarqube {
        properties {
            System.setProperty('sonar.host.url', 'https://sonarqube.apriori.com')
            System.setProperty('sonar.login', 'fccc5fee366c7aab3eadd44de26b45462cbf556c')
            System.setProperty('sonar.scm.provider', 'git')
            System.setProperty('sonar.language', 'java')
            System.setProperty('sonar.sourceEncoding', encodingType)
            System.setProperty('sonar.test.inclusions', '**/src/test/**.java')
            System.setProperty('sonar.projectBaseDir', "${rootDir}")
        }
    }

    //get all system properties
    test {
        useJUnitPlatform()
        systemProperties(System.getProperties())
        ignoreFailures(true)
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
        implementation 'org.junit.platform:junit-platform-console-standalone:1.10.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
        implementation 'io.github.bonigarcia:webdrivermanager:5.5.3'
        implementation 'org.seleniumhq.selenium:selenium-java:4.12.1'
        testImplementation 'io.qameta.allure:allure-junit5:2.13.0'
        implementation 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
        implementation 'commons-lang:commons-lang:2.6'
        implementation 'ch.qos.logback:logback-classic:1.4.11'
        implementation 'ch.qos.logback:logback-core:1.4.11'
        implementation 'org.slf4j:slf4j-api:2.0.6'
        implementation 'software.amazon.awssdk:s3:2.20.19'
        implementation 'software.amazon.awssdk:ssm:2.20.19'
        implementation 'software.amazon.awssdk:sso:2.20.19'
        implementation 'software.amazon.awssdk:auth:2.20.19'
        implementation 'software.amazon.awssdk:sts:2.15.20'
        implementation 'com.opencsv:opencsv:5.7.0'
        implementation 'com.auth0:java-jwt:4.2.0'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.14.0'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.14.0'
        implementation 'io.rest-assured:json-schema-validator:4.5.1'
        implementation 'io.rest-assured:rest-assured:4.5.1'
        implementation 'org.assertj:assertj-core:3.24.0'
        implementation 'com.codepine.api:testrail-api-java-client:2.0.0'
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'
        implementation 'javax.xml.bind:jaxb-api:2.3.1'
        implementation 'commons-cli:commons-cli:1.5.0'
        implementation 'org.jsoup:jsoup:1.15.4'
        implementation 'org.apache.commons:commons-math3:3.6.1'
        testImplementation 'org.hamcrest:hamcrest:2.2'
    }
}
