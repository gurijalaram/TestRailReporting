/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id "org.sonarqube" version "2.8"
    id "io.qameta.allure" version "2.8.1"
}

allprojects {
    group = 'com.apriori.qa'
    version = '0.0.1-SNAPSHOT'
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


/* use this template to copy specific files into modules
    findModuleAndCopyRes(project(":utils").projectDir.path + "/src/main/resources/cas-int", "/resources", ":web:cas")
*/

void findModuleAndCopyRes(String fromDir, String toDir, String moduleName) {
    if (findProject(moduleName) != null) {
        project(moduleName) {
            copyResources(fromDir, buildDir.path + toDir)
        }
    }
}

void copyResources(String fromDir, String toDir) {
    println 'Copying from dir: ' + fromDir + ' to dir: ' + toDir
    copy {
        from(fromDir)
        into(toDir)
    }
}

subprojects {

    configurations {
        testCompile
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'org.sonarqube'
    apply plugin: 'project-report'

    def encodingType = 'UTF-8'

    tasks.withType(Copy).all {
        duplicatesStrategy 'include'
    }

    // Copy allure properties into each module test resources
    processTestResources {
        from project(":utils").projectDir.path + "/src/test/resources/allure.properties"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://plugins.gradle.org/m2/" }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/apriori-snapshots'
        }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/apriori-releases'
        }

        maven {
            credentials {
                username = "deployment"
                password = "deployment123"
            }
            url = 'https://nexus.apriori.com/content/repositories/thirdparty'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = encodingType
    }

    //set project name and jar name
    project.ext.set('jar_name', 'automation-qa')

    //compile jar file
    task fatJar(type: Jar) {
        archiveBaseName = project.jar_name
        // destinationDir = file("${project.rootDir}/fatJar")
        zip64 = true

        manifest {
            attributes 'Main-Class': 'testsuites.TestMain'
        }

        duplicatesStrategy = 'include'
        from sourceSets.test.output
        from { configurations.runtimeClasspath.findAll { !it.name.endsWith('pom') }.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.txt'
        with jar
    }

    //define checkstyle xml and version
    checkstyle {
        configFile file("${project.rootDir}/checkstyle.xml")
        toolVersion '8.24'
        ignoreFailures = false
    }

    //set checkstyle main class
    checkstyleMain {
        source = 'src/main/java'
    }
    //set checkstyle test class
    checkstyleTest {
        source = 'src/test/java'
    }

    //define sonarqube properties
    sonarqube {
        properties {
            System.setProperty('sonar.host.url', 'https://sonarqube.apriori.com')
            System.setProperty('sonar.login', 'fccc5fee366c7aab3eadd44de26b45462cbf556c')
            System.setProperty('sonar.scm.provider', 'git')
            System.setProperty('sonar.language', 'java')
            System.setProperty('sonar.sourceEncoding', encodingType)
            System.setProperty('sonar.test.inclusions', '**/src/test/**.java')
            System.setProperty('sonar.projectBaseDir', "${rootDir.parentFile}")
        }
    }

    //clean allure results directory
    clean.doFirst {
        delete "${projectDir}${File.separator}target${File.separator}allure-results"
    }

    //set allure and working directory
    allure {
        version = '2.8.1'
        aspectjweaver = true
        autoconfigure = true
        resultsDir = file("${projectDir}${File.separator}target${File.separator}allure-results")
        downloadLink = 'https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.8.1/allure-commandline-2.8.1.zip'
    }

    //get all system properties
    test {
        systemProperties(System.getProperties())
        useJUnitPlatform()
        ignoreFailures(true)
    }

    //declare all dependencies
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
        implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0'
        implementation 'io.github.bonigarcia:webdrivermanager:5.0.2'
        implementation 'software.amazon.awssdk:s3:2.17.85'
        implementation 'org.apache.httpcomponents:httpclient:4.5.5'
        implementation 'junit:junit:4.13.2'
        implementation 'ch.qos.logback:logback-classic:1.2.6'
        implementation 'ch.qos.logback:logback-core:1.2.6'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
        implementation 'org.skyscreamer:jsonassert:1.4.0'
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'
        implementation 'io.rest-assured:json-schema-validator:4.3.3'
        implementation 'io.rest-assured:rest-assured:4.3.3'
        implementation 'commons-io:commons-io:2.11.0'
        implementation 'commons-lang:commons-lang:2.6'
        implementation 'commons-cli:commons-cli:1.4'
        implementation 'org.apache.commons:commons-collections4:4.3'
        implementation 'org.aeonbits.owner:owner:1.0.11'
        implementation 'org.apache.commons:commons-lang3:3.11'
        implementation 'io.qameta.allure:allure-junit5:2.17.2'
        implementation 'io.qameta.allure:allure-junit4:2.17.2'
        implementation 'io.qameta.allure:allure-java-commons:2.17.2'
        implementation 'io.qameta.allure:allure-gradle:2.8.1'
        implementation 'org.jsoup:jsoup:1.14.2'
        implementation 'com.google.code.gson:gson:2.8.7'
        implementation 'com.thomasjensen.checkstyle.addons:checkstyle-addons:6.0.0'
        implementation 'com.puppycrawl.tools:checkstyle:9.0'
        implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.2.0'
        implementation 'commons-validator:commons-validator:1.7'
        implementation 'com.sun.mail:javax.mail:1.6.2'
        implementation 'com.sun.mail:smtp:1.6.5'
        implementation 'pl.pragmatists:JUnitParams:1.1.1'
        implementation 'org.assertj:assertj-core:3.21.0'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.13.0'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.0'
        implementation group: 'software.amazon.awssdk', name: 'sso', version: '2.17.129'


        implementation 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'

        testImplementation 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }
}
