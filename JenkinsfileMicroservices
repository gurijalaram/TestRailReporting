def buildInfo
def buildInfoFile = "build-info.yml"
def uuid = UUID.randomUUID()
def javaOpts = ""
def testSuite
def folder = "microservices"

pipeline {
    agent {
        label "automation"
    }

    stages {
        stage("Initialize") {
            steps {
                echo "Initializing.."
                script {
                    // Read file.
                    buildInfo = readYaml file: buildInfoFile
                    sh "rm ${buildInfoFile}"

                    // Write file.
                    buildInfo.buildNumber = env.BUILD_TAG
                    buildInfo.buildTimestamp = uuid
                    buildInfo.commitHash = env.GIT_COMMIT
                    writeYaml file: buildInfoFile, data: buildInfo

                    // Log file.
                    sh "cat ${buildInfoFile}"

                    // Set run time parameters
                    javaOpts = javaOpts + "-Dmode=${params.TEST_MODE}"
                    javaOpts = javaOpts + " -Denv=${params.TARGET_ENV}"

                    testSuite = params.SUITE

                    echo "${javaOpts}"
                }
            }
        }
        stage("Build") {
            steps {
                echo "Building.."
                sh """
                    docker build \
                        --rm \
                        --build-arg MODULE=${MODULE} \
                        --build-arg TEST_MODE=${TEST_MODE} \
                        --build-arg FOLDER=${folder} \
                        --no-cache \
                        --tag ${buildInfo.name}-build-${uuid}:latest \
                        --label \"build-date=${uuid}\" \
                        .
                """
            }
        }
        stage("Test") {
            steps {
                echo "Running.."

                withCredentials([
                        string(credentialsId: 'aws_access_key_id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws_secret_access_key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                    docker run \
                        -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                        -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                        -e AWS_PROFILE='development' \
                        -e AWS_DEFAULT_REGION='us-east-1' \
                        -itd \
                        --name ${buildInfo.name}-build-${uuid} \
                        ${buildInfo.name}-build-${uuid}:latest
                     """
                     }

                echo "Testing.."

                sh """
                    sleep 5s
                    docker exec \
                        ${buildInfo.name}-build-${uuid} \
                        java \
                        ${javaOpts} \
                        -javaagent:aspectjweaver-1.8.10.jar \
                        -jar automation-tests.jar \
                        --tests ${testSuite}
                """

                // Copy out Allure results
                echo "Publishing Results"
                sh """
                    docker cp \
                    ${buildInfo.name}-build-${uuid}:app/target/allure-results \
                    .
                """
                allure includeProperties: false, jdk: "", results: [[path: "allure-results"]]
            }
        }
    }
    post {
        always {
            echo "Cleaning up.."
            sh "docker rm -f ${buildInfo.name}-build-${uuid}"
            sh "docker rmi ${buildInfo.name}-build-${uuid}:latest"
            sh "docker system prune --force"
            cleanWs()
        }
    }
}
