def buildInfo
def buildInfoFile = "build-info.yml"
def timeStamp = new Date().format('yyyyMMddHHmmssSSS')
def javaOpts = ""
def url
def threadCount
def browser
def customer
def testSuite
def users_csv_file
def default_aws_region
def folder
def addlJavaOpts
def number_of_parts
def parts_csv_file
def agent_type
def nexus_repository
def nexus_version
def custom_install
def connector
def environment = [profile: 'development', region: 'us-east-1']
def ecrDockerRegistry = '563229348140.dkr.ecr.us-east-1.amazonaws.com/apriori-qa'

def registry_password(profile = '', region = '') {
    withCredentials([
            file(credentialsId: 'AWS_CONFIG_FILE', variable: 'AWS_CONFIG_SECRET_TXT'),
            file(credentialsId: 'AWS_CREDENTIALS_FILE', variable: 'AWS_CREDENTIALS_SECRET_TXT')]) {
        return sh(
                returnStdout: true,
                script: """
                docker run \
                    -v "$AWS_CREDENTIALS_SECRET_TXT":/root/.aws/credentials \
                    -v "$AWS_CONFIG_SECRET_TXT":/root/.aws/config \
                    amazon/aws-cli ecr get-login-password \
                    --profile ${profile} --region ${region}
            """
        ).trim()
    }
}

pipeline {
     agent {
            label ('docker && linux')
        }

    stages {
        stage("Initialize") {
            steps {
                echo "Initializing.."
                script {
                    // Read file.
                    buildInfo = readYaml file: buildInfoFile
                    sh "rm ${buildInfoFile}"

                    // Write file.
                    buildInfo.buildNumber = env.BUILD_TAG
                    buildInfo.buildTimestamp = timeStamp
                    buildInfo.commitHash = env.GIT_COMMIT
                    writeYaml file: buildInfoFile, data: buildInfo

                    // Log file.
                    sh "cat ${buildInfoFile}"

                    root_log_level = params.ROOT_LOG_LEVEL
                    if (root_log_level == null || root_log_level == "none") {
                        root_log_level = "INFO"
                    }

                    // Set run time parameters
                    javaOpts = javaOpts + " -Dmode=${params.TEST_MODE}"
                    javaOpts = javaOpts + " -Denv=${params.TARGET_ENV}"
                    javaOpts = javaOpts + " -DROOT_LOG_LEVEL=${root_log_level}"

                    username = params.USERNAME
                    password = params.PASSWORD

                    if (username != null && password != null) {
                        javaOpts = javaOpts + " -Dglobal_use_default_user=true"
                        javaOpts = javaOpts + " -Dglobal_default_user_name=${username}"
                        javaOpts = javaOpts + " -Dglobal_default_password=${password}"
                    }

                    folder = params.MODULE_TYPE
                    if (!folder && "${MODULE}".contains("-ui")) {
                        folder = "web"
                    } else if (!folder && "${MODULE}".contains("-api")) {
                        folder = "microservices"
                    } else if (!folder && "${MODULE}".contains("-agent")) {
                        folder = "agent"
                    } else {
                        folder = "integrate"
                    }

                    url = params.TARGET_URL
                    if (url && url != "none") {
                        javaOpts = javaOpts + " -Durl=${params.TARGET_URL}"
                    }

                    threadCount = params.THREAD_COUNT
                    if (threadCount && threadCount.isInteger() && threadCount.toInteger() > 0) {
                        javaOpts = javaOpts +  " -D'junit.jupiter.execution.parallel.config.fixed.max-pool-size'=${threadCount}"
                        javaOpts = javaOpts +  " -D'junit.jupiter.execution.parallel.config.fixed.parallelism'=${threadCount}"
                    }

                    browser = params.BROWSER
                    if (browser && browser != "none") {
                        javaOpts = javaOpts + " -Dbrowser=${browser}"
                    }

                    if (params.HEADLESS) {
                        javaOpts = javaOpts + " -Dheadless=true"
                    }

                    testSuite = params.TEST_SUITE
                    if (params.TEST_SUITE == "Other") {
                        testSuite = params.OTHER_TEST
                    }

                    users_csv_file = params.CSV_FILE
                    if (users_csv_file && users_csv_file != "none") {
                        javaOpts = javaOpts + " -Dusers_csv_file=${params.CSV_FILE}"
                    }

                    customer = params.CUSTOMER
                    if (customer && customer != "none") {
                        javaOpts = javaOpts + ' -Dcustomer=\\\"${params.CUSTOMER}\\\"'
                    }

                    default_aws_region = params.REGION
                    if (default_aws_region && default_aws_region != "none") {
                        javaOpts = javaOpts + " -Ddefault_aws_region=${params.REGION}"
                    }

                    number_of_parts = params.NUMBER_OF_PARTS
                    if (number_of_parts && number_of_parts != "none") {
                        javaOpts = javaOpts + " -Dnumber_of_parts=${params.NUMBER_OF_PARTS}"
                    }

                    parts_csv_file = params.PARTS_CSV_FILE
                    if (parts_csv_file && parts_csv_file != "none") {
                        javaOpts = javaOpts + " -Dparts_csv_file=${params.PARTS_CSV_FILE}"
                    }

                    agent_type = params.AGENT_TYPE
                    if (agent_type && agent_type != "none") {
                        javaOpts = javaOpts + " -Dci-connect_agent_type=${params.AGENT_TYPE}"
                    }

                    nexus_repository = params.NEXUS_REPOSITORY
                    if (nexus_repository && nexus_repository != "none") {
                        javaOpts = javaOpts + " -Dci-connect_nexus_repository=${params.NEXUS_REPOSITORY}"
                    }

                    nexus_version = params.NEXUS_VERSION
                    if (nexus_version && nexus_version != "none") {
                        javaOpts = javaOpts + " -Dci-connect_nexus_version=${params.NEXUS_VERSION}"
                    }

                    custom_install = params.CUSTOM_INSTALL
                    if (custom_install && custom_install != "none") {
                        javaOpts = javaOpts + " -Dci-connect_custom_install=${params.CUSTOM_INSTALL}"
                    }

                    addlJavaOpts = params.JAVAOPTS
                    if (addlJavaOpts && addlJavaOpts != "none") {
                        javaOpts = javaOpts + " " + addlJavaOpts
                    }

                    echo "${javaOpts}"
                }
            }
        }

        stage("Build") {
            steps {
                echo "Building..."
                script {
                    def registryPwd = registry_password("${environment.profile}", "${environment.region}")
                    sh "docker login -u AWS -p ${registryPwd} ${ecrDockerRegistry}"
                    sh """
                         docker build \
                             --no-cache \
                             --target build \
                             --tag ${buildInfo.name}-test-${timeStamp}:latest \
                             --label \"build-date=${timeStamp}\" \
                             --label qa-automation \
                             --build-arg FOLDER=${folder} \
                             --build-arg MODULE=${MODULE} \
                             .
                     """
                }
            }
        }

        stage("Test") {
            steps {
                echo "Testing..."
                withCredentials([
                    file(credentialsId: 'AWS_CONFIG_FILE', variable: 'AWS_CONFIG_SECRET_TXT'),
                    file(credentialsId: 'AWS_CREDENTIALS_FILE', variable: 'AWS_CREDENTIALS_SECRET_TXT')]) {

                    sh """
                        docker build \
                            --target test \
                            --progress=plain \
                            --tag ${buildInfo.name}-test-${timeStamp}:latest \
                            --label \"build-date=${timeStamp}\" \
                            --label qa-automation \
                            --secret id=aws_config,src=${AWS_CONFIG_SECRET_TXT} \
                            --secret id=aws_creds,src=${AWS_CREDENTIALS_SECRET_TXT} \
                            --build-arg FOLDER=${folder} \
                            --build-arg MODULE=${MODULE} \
                            --build-arg JAVAOPTS='${javaOpts}' \
                            --build-arg TESTS=${testSuite} \
                            .
                    """
                }
            }
        }

        stage("Extract Test Results") {
            steps {
                // Copy out build/test artifacts.
                echo "Extract Test Results.."
                sh "docker create --name ${buildInfo.name}-test-${timeStamp} ${buildInfo.name}-test-${timeStamp}:latest"
                sh "docker cp ${buildInfo.name}-test-${timeStamp}:build-workspace/${folder}/${MODULE}/build ."
                echo "Publishing Results"
                allure includeProperties: false, jdk: "", results: [[path: "build/allure-results"]]
                junit skipPublishingChecks: true, testResults: 'build/test-results/test/*.xml'

                publishHTML(target: [
                        allowMissing         : false,
                        alwaysLinkToLastBuild: false,
                        keepAll              : true,
                        reportDir            : 'build/reports/tests/test',
                        reportFiles          : 'index.html',
                        reportName           : "${buildInfo.name} Test Report"
                ])
            }
        }
    }

    post {
        always {
            echo "Cleaning up.."
            sh "docker system prune --filter \"label=qa-automation\" --force"
            cleanWs()

            script {
                if (currentBuild.rawBuild.log.contains('Response contains MappingException.')) {
                    error("Build failed because of Response contains MappingException. Please check Test logs for text: Response contains MappingException.")
                }
            }
        }
    }
}