def buildInfo
def buildInfoFile = "build-info.yml"
def buildVersion = "latest"
def runType = "qa-final"
def environment = [profile: 'development', region: 'us-east-1']
def ecrDockerRegistry = '563229348140.dkr.ecr.us-east-1.amazonaws.com/apriori-qa'

def registry_password(profile = '', region = '') {
    withCredentials([
            file(credentialsId: 'AWS_CONFIG_FILE', variable: 'AWS_CONFIG_SECRET_TXT'),
            file(credentialsId: 'AWS_CREDENTIALS_FILE', variable: 'AWS_CREDENTIALS_SECRET_TXT')]) {
        return sh(
                returnStdout: true,
                script: """
                docker run \
                    -v "$AWS_CREDENTIALS_SECRET_TXT":/root/.aws/credentials \
                    -v "$AWS_CONFIG_SECRET_TXT":/root/.aws/config \
                    amazon/aws-cli ecr get-login-password \
                    --profile ${profile} --region ${region}
            """
        ).trim()
    }
}

def tag_n_push_version(currentVersion = '', targetVersion = '') {
    // Tag & push version.
    sh "docker tag ${currentVersion} ${targetVersion}"
    sh "docker push ${targetVersion}"

}

def buildImage(folder = '', module = '', buildInfo = '', runType = '', buildVersion = '', profile = '', region = '', ecrDockerRegistry = '') {
    echo "Building..."

    def registryPwd = registry_password("${profile}", "${region}")

    sh "docker login -u AWS -p ${registryPwd} ${ecrDockerRegistry}"

    sh """
            docker build -f ./qa-stacks/Dockerfile \
            --label qa-stacks-${module} \
            --build-arg FOLDER=${folder} \
            --build-arg MODULE=${module} \
            --tag ${buildInfo}-${module}-${runType}:${buildVersion} \
            .
        """
}

def tag_n_push_image(module = '', ecrDockerRegistry = '', buildInfo = '', runType = '', buildVersion = '') {
    echo "Tagging and Pushing..."
    script {

        def awsArtifactTarget = "${ecrDockerRegistry}-${module}:${buildVersion}"

        // Tag and push to ECR.
        tag_n_push_version("${buildInfo}-${module}-${runType}:latest", "${awsArtifactTarget}")
    }
}

def remove_image(module = '') {
    echo "Cleaning..."
    sh "docker system prune --filter \"label=qa-stacks-${module}\" -f -a"
    sh "docker container prune"
}

pipeline {
    agent {
        label "automation"
    }

    stages {
        stage("Initialize") {
            steps {
                echo "Initializing..."
                script {
                    // Read file.
                    buildInfo = readYaml file: buildInfoFile
                    sh "rm ${buildInfoFile}"
                }
            }
        }

        stage("Multi-Stage") {
            matrix {
                agent {
                    label "automation"
                }
                axes {
                    axis {
                        name 'MODULE'
                        values 'cid-ui', 'cas-ui', 'ach-ui', 'cis-ui', 'cid-api', 'cas-api', 'cds-api', 'ats-api',
                                'cus-api', 'css-api', 'vds-api', 'nts-api', 'fms-api', 'sds-api', 'ach-api', 'cmp-api',
                                'bcs-api', 'cis-api', 'dds-api', 'dms-api', 'qds-api', 'qms-api', 'edc-api', 'bcm-api', 'gcd-api'
                    }
                }

                stages {
                    stage("Deploy_Web") {
                        when {
                            expression { MODULE.contains('-ui') }
                        }
                        steps {
                            buildImage("web", "${MODULE}", "${buildInfo.name}", "${runType}", "${buildVersion}", "${environment.profile}", "${environment.region}", "${ecrDockerRegistry}")

                            tag_n_push_image("${MODULE}", "${ecrDockerRegistry}", "${buildInfo.name}", "${runType}", "${buildVersion}")

                            remove_image("${MODULE}")
                        }
                    }
                    stage("Deploy_Microservices") {
                        when {
                            expression { MODULE.contains('-api') }
                        }
                        steps {
                            buildImage("microservices", "${MODULE}", "${buildInfo.name}", "${runType}", "${buildVersion}", "${environment.profile}", "${environment.region}", "${ecrDockerRegistry}")

                            tag_n_push_image("${MODULE}", "${ecrDockerRegistry}", "${buildInfo.name}", "${runType}", "${buildVersion}")

                            remove_image("${MODULE}")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}